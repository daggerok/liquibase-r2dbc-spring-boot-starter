name: tests
on:
  push:
    branches:
      - '*'
env:
  NODE_VERSION: 18.3.0
jobs:
  tests:
    name: unit tests java-${{ matrix.java }}
    if: github.event.inputs.trigger == ''
      || !startsWith(github.event.inputs.trigger, 'm')
      || !startsWith(github.event.inputs.trigger, 'M')
    strategy:
      matrix:
        java: [8, 11, 17, 18]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v3
        with:
          # 'temurin' 'zulu' 'adopt' 'adopt-hotspot' 'adopt-openj9' 'liberica' 'microsoft'
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
      - uses: actions/cache@v3
        with:
          path: |
            ~/.m2
            ~/.npm
            ~/.docker
            ~/.gradle
          key: ${{ runner.os }}-build-${{ hashFiles('**/*gradle*', '**/pom.xml', '**/package.json', '**/package-lock.json') }}
      - run: if [[ "" != `docker ps -aq` ]] ; then docker rm -f -v `docker ps -aq` ; fi
      - run: cd $GITHUB_WORKSPACE ; ./mvnw
  liquibase-r2dbc-spring-boot-starter-mysql-example:
    name: liquibase-r2dbc-spring-boot-starter-mysql-example integration tests java-${{ matrix.java }}
    if: github.event.inputs.trigger == ''
      || !startsWith(github.event.inputs.trigger, 'm')
      || !startsWith(github.event.inputs.trigger, 'M')
    strategy:
      matrix:
        java: [8, 11, 17, 18]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
      - uses: actions/cache@v3
        with:
          path: |
            ~/.m2
            ~/.npm
            ~/.node
            ~/.docker
            ~/.gradle
          key: ${{ runner.os }}-build-${{ hashFiles('**/*gradle*', '**/pom.xml', '**/package.json', '**/package-lock.json') }}
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: sudo apt install -y httpie
      - run: docker pull mysql:8.0.24
      - run: if [[ "" != `docker ps -aq` ]] ; then docker rm -f -v `docker ps -aq` ; fi
      - run: |
          docker run -d --rm --name mysql --platform=linux/x86_64 \
            --health-cmd='mysqladmin ping -h 127.0.0.1 -u $MYSQL_USER --password=$MYSQL_PASSWORD || exit 1' \
            --health-start-period=1s --health-retries=1111 --health-interval=1s --health-timeout=5s \
            -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=database \
            -e MYSQL_USER=user -e MYSQL_PASSWORD=password \
            -p 3306:3306 \
            mysql:8.0.24
      - run: while [[ $(docker ps -n 1 -q -f health=healthy -f status=running | wc -l) -lt 1 ]] ; do sleep 3 ; echo -n '.' ; done ; sleep 15; echo 'MySQL is ready.'
      - run: npm_config_yes=true npx wait-port 3306
      - run: ./mvnw clean package -DskipTests
      - run: |
          rm -rfv $GITHUB_WORKSPACE/examples/liquibase-r2dbc-spring-boot-starter-mysql-example/target/{*.jar.original,*-sources.jar}
          java -jar $GITHUB_WORKSPACE/examples/liquibase-r2dbc-spring-boot-starter-mysql-example/target/*.jar &
          npm_config_yes=true npx wait-port 8001
      - run: http --ignore-stdin  get :8001
      - run: http --ignore-stdin  get :8001/api
      - run: http --ignore-stdin  get :8001/api/messages
      - run: http --ignore-stdin post :8001/api/messages body=hey
      - run: http --ignore-stdin  get :8001/api/messages
      - run: cd $GITHUB_WORKSPACE ; ./mvnw -f examples/liquibase-r2dbc-spring-boot-starter-mysql-example spring-boot:stop
      - run: cd $GITHUB_WORKSPACE ; docker stop mysql
  liquibase-r2dbc-spring-boot-starter-postgres-example:
    name: liquibase-r2dbc-spring-boot-starter-postgres-example integration tests java-${{ matrix.java }}
    if: github.event.inputs.trigger == ''
      || !startsWith(github.event.inputs.trigger, 'm')
      || !startsWith(github.event.inputs.trigger, 'M')
    strategy:
      matrix:
        java: [8, 11, 17, 18]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
      - uses: actions/cache@v3
        with:
          path: |
            ~/.m2
            ~/.npm
            ~/.node
            ~/.docker
            ~/.gradle
          key: ${{ runner.os }}-build-${{ hashFiles('**/*gradle*', '**/pom.xml', '**/package.json', '**/package-lock.json') }}
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: sudo apt install -y httpie
      - run: docker pull postgres:14.3-alpine3.16
      - run: if [[ "" != `docker ps -aq` ]] ; then docker rm -f -v `docker ps -aq` ; fi
      - run: |
          docker run -d --rm --name postgres -p 5432:5432 --platform=linux/x86_64 \
            -e POSTGRES_PASSWORD=password -e POSTGRES_DB=database -e POSTGRES_USER=user \
            --health-start-period=1s --health-retries=1111 --health-interval=1s --health-timeout=5s \
            --health-cmd='pg_isready -h 127.0.0.1 -p 5432 -d $POSTGRES_DB -U $POSTGRES_USER || exit 1' \
            postgres:14.3-alpine3.16
      - run: while [[ $(docker ps -n 1 -q -f health=healthy -f status=running | wc -l) -lt 1 ]] ; do sleep 3 ; echo -n '.' ; done ; sleep 15; echo 'Postgres is ready.'
      - run: npm_config_yes=true npx wait-port 5432
      - run: rm -rf ~/.m2/repository/daggerok/liquibase/r2dbc*
      - run: ./mvnw clean install -DskipTests
      - run: cd $GITHUB_WORKSPACE ; ./mvnw -f examples/liquibase-r2dbc-spring-boot-starter-postgres-example spring-boot:start
      - run: npm_config_yes=true npx wait-port 8002
      - run: http --ignore-stdin  get :8002
      - run: http --ignore-stdin  get :8002/api
      - run: http --ignore-stdin  get :8002/api/messages
      - run: http --ignore-stdin post :8002/api/messages body=hey
      - run: http --ignore-stdin  get :8002/api/messages
      - run: cd $GITHUB_WORKSPACE ; ./mvnw -f examples/liquibase-r2dbc-spring-boot-starter-postgres-example spring-boot:stop
      - run: cd $GITHUB_WORKSPACE ; docker stop postgres
  liquibase-r2dbc-spring-boot-starter-h2-file-example:
    name: liquibase-r2dbc-spring-boot-starter-h2-file-example integration tests java-${{ matrix.java }}
    if: github.event.inputs.trigger == ''
      || !startsWith(github.event.inputs.trigger, 'm')
      || !startsWith(github.event.inputs.trigger, 'M')
    strategy:
      matrix:
        java: [8, 11, 17, 18]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
      - uses: actions/cache@v3
        with:
          path: |
            ~/.m2
            ~/.npm
            ~/.node
            ~/.docker
            ~/.gradle
          key: ${{ runner.os }}-build-${{ hashFiles('**/*gradle*', '**/pom.xml', '**/package.json', '**/package-lock.json') }}
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: sudo apt install -y httpie
      - run: rm -rf ~/.m2/repository/daggerok/liquibase/r2dbc*
      - run: ./mvnw clean install -DskipTests
      - run: cd $GITHUB_WORKSPACE ; ./mvnw -f examples/liquibase-r2dbc-spring-boot-starter-h2-file-example spring-boot:start
      - run: npm_config_yes=true npx wait-port 8003
      - run: http --ignore-stdin  get :8003
      - run: http --ignore-stdin  get :8003/api
      - run: http --ignore-stdin  get :8003/api/messages
      - run: http --ignore-stdin post :8003/api/messages body=hey
      - run: http --ignore-stdin  get :8003/api/messages
      - run: cd $GITHUB_WORKSPACE ; ./mvnw -f examples/liquibase-r2dbc-spring-boot-starter-h2-file-example spring-boot:stop
